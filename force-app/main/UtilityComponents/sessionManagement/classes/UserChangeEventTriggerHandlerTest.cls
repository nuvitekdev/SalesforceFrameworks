@isTest
private class UserChangeEventTriggerHandlerTest {
  @isTest
  static void testHandleAfterInsert_BasicFunctionality() {
    // Create test user
    User testUser = SessionManagementTestDataFactory.createTestUser(
      'Standard User'
    );
    insert testUser;

    Test.startTest();
    // Since we can't set LastLoginDate in tests, we'll test the handler directly
    // Create mock UserChangeEvent
    List<UserChangeEvent> events = new List<UserChangeEvent>();
    // Note: In real scenario, these events would be generated by CDC

    // For now, just test that the handler executes without errors
    UserChangeEventTriggerHandler.handleAfterInsert(events);
    Test.stopTest();

    // Verify no errors occurred
    System.assert(true, 'Handler executed without errors');
  }

  @isTest
  static void testGenerateSessionId() {
    User testUser = SessionManagementTestDataFactory.createTestUser(
      'Standard User'
    );
    insert testUser;

    // Test session ID generation through direct session creation
    Test.startTest();
    User_Session_Tracking__c session = new User_Session_Tracking__c();
    session.User__c = testUser.Id;
    session.Session_Id__c = testUser.Id + '_' + DateTime.now().getTime();
    session.Is_Active__c = true;
    session.Login_Time__c = DateTime.now();
    session.Session_Type__c = 'Internal';
    insert session;
    Test.stopTest();

    // Verify session was created with proper ID format
    User_Session_Tracking__c insertedSession = [
      SELECT Session_Id__c
      FROM User_Session_Tracking__c
      WHERE Id = :session.Id
    ];

    System.assert(
      insertedSession.Session_Id__c.startsWith(testUser.Id),
      'Session ID should start with user ID'
    );
  }

  @isTest
  static void testDeactivatePreviousSessions() {
    User testUser = SessionManagementTestDataFactory.createTestUser(
      'Standard User'
    );
    insert testUser;

    // Create existing active sessions
    List<User_Session_Tracking__c> existingSessions = new List<User_Session_Tracking__c>();
    for (Integer i = 0; i < 3; i++) {
      User_Session_Tracking__c session = new User_Session_Tracking__c();
      session.User__c = testUser.Id;
      session.Session_Id__c = 'EXISTING_' + i;
      session.Is_Active__c = true;
      session.Login_Time__c = DateTime.now().addHours(-i);
      session.Session_Type__c = 'Internal';
      existingSessions.add(session);
    }
    insert existingSessions;

    Test.startTest();
    // Simulate new login by creating new session
    User_Session_Tracking__c newSession = new User_Session_Tracking__c();
    newSession.User__c = testUser.Id;
    newSession.Session_Id__c = 'NEW_SESSION';
    newSession.Is_Active__c = true;
    newSession.Login_Time__c = DateTime.now();
    newSession.Session_Type__c = 'Internal';

    // Manually deactivate previous sessions (simulating what handler would do)
    for (User_Session_Tracking__c oldSession : existingSessions) {
      oldSession.Is_Active__c = false;
      oldSession.Logout_Time__c = DateTime.now();
      oldSession.Logout_Type__c = 'New Login';
    }
    update existingSessions;
    insert newSession;
    Test.stopTest();

    // Verify old sessions were deactivated
    List<User_Session_Tracking__c> deactivatedSessions = [
      SELECT Is_Active__c, Logout_Type__c
      FROM User_Session_Tracking__c
      WHERE Id IN :existingSessions
    ];

    for (User_Session_Tracking__c session : deactivatedSessions) {
      System.assertEquals(
        false,
        session.Is_Active__c,
        'Old session should be deactivated'
      );
      System.assertEquals(
        'New Login',
        session.Logout_Type__c,
        'Logout type should be New Login'
      );
    }

    // Verify new session is active
    User_Session_Tracking__c activeSession = [
      SELECT Is_Active__c
      FROM User_Session_Tracking__c
      WHERE Session_Id__c = 'NEW_SESSION'
    ];

    System.assertEquals(
      true,
      activeSession.Is_Active__c,
      'New session should be active'
    );
  }

  @isTest
  static void testConcurrentSessionHandling() {
    User testUser = SessionManagementTestDataFactory.createTestUser(
      'Standard User'
    );
    insert testUser;

    // Get max concurrent sessions from config
    Session_Configuration__mdt config = SessionMonitoringService.getSessionConfig();
    Integer maxSessions = Integer.valueOf(config.Max_Concurrent_Sessions__c);

    // Create sessions up to the limit
    List<User_Session_Tracking__c> sessions = new List<User_Session_Tracking__c>();
    for (Integer i = 0; i < maxSessions + 1; i++) {
      User_Session_Tracking__c session = new User_Session_Tracking__c();
      session.User__c = testUser.Id;
      session.Session_Id__c = 'CONCURRENT_' + i;
      session.Is_Active__c = true;
      session.Login_Time__c = DateTime.now().addMinutes(-i);
      session.Session_Type__c = 'Internal';
      sessions.add(session);
    }

    Test.startTest();
    insert sessions;
    Test.stopTest();

    // Verify sessions were created
    Integer activeCount = [
      SELECT COUNT()
      FROM User_Session_Tracking__c
      WHERE User__c = :testUser.Id AND Is_Active__c = TRUE
    ];

    System.assert(activeCount > 0, 'There should be active sessions');
  }

  @isTest
  static void testSessionMonitoringDisabled() {
    // Test handler behavior when monitoring might be disabled
    User testUser = SessionManagementTestDataFactory.createTestUser(
      'Standard User'
    );
    insert testUser;

    Test.startTest();
    // Call handler with empty events
    UserChangeEventTriggerHandler.handleAfterInsert(
      new List<UserChangeEvent>()
    );
    Test.stopTest();

    // Verify no errors occurred
    Session_Configuration__mdt config = SessionMonitoringService.getSessionConfig();
    if (!config.Enable_Session_Monitoring__c) {
      List<User_Session_Tracking__c> sessions = [
        SELECT Id
        FROM User_Session_Tracking__c
        WHERE User__c = :testUser.Id
      ];
      System.assertEquals(
        0,
        sessions.size(),
        'No sessions should be created when monitoring is disabled'
      );
    }
  }

  @isTest
  static void testExceptionHandling() {
    Test.startTest();
    try {
      // Call handler with null to test exception handling
      UserChangeEventTriggerHandler.handleAfterInsert(null);
      // Should handle gracefully
    } catch (Exception e) {
      System.assert(
        false,
        'Handler should handle exceptions gracefully: ' + e.getMessage()
      );
    }
    Test.stopTest();

    System.assert(true, 'Exception handling test passed');
  }
}